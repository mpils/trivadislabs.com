# ---------------------------------------------------------------------------
# Trivadis - Part of Accenture, Platform Factory - Transactional Data Platform
# Saegereistrasse 29, 8152 Glattbrugg, Switzerland
# ---------------------------------------------------------------------------
# Name.......: Vagrantfile
# Author.....: Stefan Oehrli (oes) stefan.oehrli@trivadis.com
# Editor.....: Stefan Oehrli
# Date.......: 2019.05.09
# Revision...:  
# Purpose....: Vagrant file to setup and configure ad.trivadislabs.com
# Notes......: 
# Reference..: https://github.com/rgl/windows-domain-controller-vagrant
# License....: Apache License Version 2.0, January 2004 as shown
#              at http://www.apache.org/licenses/
# ---------------------------------------------------------------------------
# Modified...:
# see git revision history for more information on changes/updates
# ---------------------------------------------------------------------------
require 'yaml'

# install missing vagrant plugin
unless Vagrant.has_plugin?("vagrant-reload")
  puts 'Installing vagrant-reload Plugin...'
  system('vagrant plugin install vagrant-reload')
end

# - Configuration -----------------------------------------------------------
# create an absolute path see https://blog.scottlowe.org/2016/01/14/improved-way-yaml-vagrant/
common_config   = YAML.load_file(File.join(File.dirname(__FILE__), '../common/config/vagrant.yml'))
# shared configuration
var_default_password= common_config['common']['default_password']
var_domain_name     = common_config['common']['domain_name']
var_company_name    = common_config['common']['company_name']
var_gateway_address = common_config['common']['gateway_address']
var_public_dns1     = common_config['common']['public_dns1']
var_public_dns2     = common_config['common']['public_dns2']
var_dns             = common_config['common']['dns']

# ad box configuration
var_box             = common_config['win2019ad']['box']
var_vm_name         = common_config['win2019ad']['vm_name']
var_people_ou_name  = common_config['win2019ad']['people_ou_name']
var_groups_ou_name  = common_config['win2019ad']['groups_ou_name']
var_domain_mode     = common_config['win2019ad']['domain_mode']
var_host_fqdn       = var_vm_name + "." + var_domain_name
var_mem_size        = common_config['win2019ad']['mem_size']
var_cpus            = common_config['win2019ad']['cpus']
var_public_ip       = common_config['win2019ad']['public_ip']
# - End of Configuration ----------------------------------------------------

Vagrant.configure("2") do |config|
# - Domain controller -------------------------------------------------------
  config.vm.define var_vm_name do |cfg|
    cfg.vm.box      = var_box
    cfg.vm.define   var_host_fqdn
    cfg.vm.hostname = var_vm_name

    # Share an additional common folder to the guest VM
    cfg.vm.synced_folder "../common", "/vagrant_common"
    # Share an additional labs folder to the guest VM
    cfg.vm.synced_folder "../labs", "/vagrant_labs"

    # Create a private network, which allows host-only access to the machine
    # using a specific IP.
    cfg.vm.network :private_network, ip: var_public_ip, gateway: var_gateway_address, dns: var_dns

    # change memory size, cpus etc
    cfg.vm.provider "virtualbox" do |v|
      v.memory    = var_mem_size
      v.cpus      = var_cpus
      v.name      = var_host_fqdn
    end

    # use the plaintext WinRM transport and force it to use basic authentication.
    # NB this is needed because the default negotiate transport stops working
    #    after the domain controller is installed.
    #    see https://groups.google.com/forum/#!topic/vagrant-up/sZantuCM0q4
    cfg.winrm.transport       = :plaintext
    cfg.winrm.basic_auth_only = true
    cfg.vm.communicator       = "winrm"

    # initialize AD-Lab scripts
    cfg.vm.provision "shell" do |s|
      s.path        = "scripts/00_init_ad-lab.ps1"
      s.privileged  = false
      s.args        = [var_domain_name, var_domain_mode, var_public_ip, var_public_dns1, var_public_dns2, var_default_password]
    end
 
    # Provision everything on the first run
    cfg.vm.provision "shell", path: "scripts/01_config_ad-lab_part1.ps1", privileged: false
    
    # reboot server after AD role deploy
    cfg.vm.provision :reload
    cfg.vm.provision "shell", path: "scripts/02_config_ad-lab_part2.ps1", privileged: false
    cfg.vm.provision :reload
    cfg.vm.provision "shell", path: "scripts/03_config_ad-lab_part3.ps1", privileged: false
  end
end
# --- EOF -------------------------------------------------------------------