# ---------------------------------------------------------------------------
# Trivadis - Part of Accenture, Platform Factory - Transactional Data Platform
# Saegereistrasse 29, 8152 Glattbrugg, Switzerland
# ---------------------------------------------------------------------------
# Name.......: Vagrantfile
# Author.....: Stefan Oehrli (oes) stefan.oehrli@trivadis.com
# Editor.....: Stefan Oehrli
# Date.......: 2019.05.09
# Revision...:  
# Purpose....: Vagrant file to setup and configure oud.trivadislabs.com
# Notes......: 
# Reference..: https://github.com/rgl/windows-domain-controller-vagrant
# License....: Apache License Version 2.0, January 2004 as shown
#              at http://www.apache.org/licenses/
# ---------------------------------------------------------------------------
# Modified...:
# see git revision history for more information on changes/updates
# ---------------------------------------------------------------------------
require 'yaml'

# install missing vagrant plugin
unless Vagrant.has_plugin?("vagrant-reload")
  puts 'Installing vagrant-reload Plugin...'
  system('vagrant plugin install vagrant-reload')
end

# - Configuration -----------------------------------------------------------
params          = YAML.load_file '../common/config/vagrant.yml'

# shared configuration
var_default_password= params['common']['default_password']
var_domain_name     = params['common']['domain_name']
var_gateway_address = params['common']['gateway_address']
var_public_dns1     = params['common']['public_dns1']
var_public_dns2     = params['common']['public_dns2']
var_dns             = params['common']['dns']

# oud box configuration
var_box             = params['ol7oud12']['box']
var_box_url         = params['ol7oud12']['box_url']
var_vm_name         = params['ol7oud12']['vm_name']
var_host_fqdn       = var_vm_name + "." + var_domain_name
var_mem_size        = params['ol7oud12']['mem_size']
var_cpus            = params['ol7oud12']['cpus']
var_public_ip       = params['ol7oud12']['public_ip']
var_ssh_port        = params['ol7oud12']['ssh_port']
var_ldap_port       = params['ol7oud12']['ldap_port']
var_ldaps_port      = params['ol7oud12']['ldaps_port']
var_admin_port      = params['ol7oud12']['admin_port']
# - End of Configuration ----------------------------------------------------

Vagrant.configure("2") do |config|
# - Domain controller -------------------------------------------------------
  config.vm.define var_vm_name do |cfg|
    cfg.vm.box      = var_box
    cfg.vm.box_url  = var_box_url
    cfg.vm.define   var_host_fqdn
    cfg.vm.hostname = var_vm_name

    cfg.vm.box_check_update = false

    # Share an additional common folder to the guest VM
    cfg.vm.synced_folder "../common", "/vagrant_common"
    # Share an additional labs folder to the guest VM
    cfg.vm.synced_folder "../labs", "/vagrant_labs"
    
    # Oracle port forwarding  
    cfg.vm.network :forwarded_port, guest: 22,      host: var_ssh_port
    cfg.vm.network :forwarded_port, guest: 1389,    host: var_ldap_port
    cfg.vm.network :forwarded_port, guest: 1636,    host: var_ldaps_port
    cfg.vm.network :forwarded_port, guest: 4444,    host: var_admin_port
    cfg.vm.network :forwarded_port, guest: 7001,    host: 7001
    cfg.vm.network :forwarded_port, guest: 7002,    host: 7002
    cfg.vm.network :forwarded_port, guest: 8080,    host: 8080
    cfg.vm.network :forwarded_port, guest: 10443,   host: 10443
    cfg.vm.network :forwarded_port, guest: 8444,    host: 8444
    cfg.vm.network :private_network, ip: var_public_ip
    #cfg.vm.network :private_network, ip: var_public_ip, gateway: var_gateway_address, dns: var_dns
  
    # change memory size, cpus etc
    cfg.vm.provider "virtualbox" do |v|
      v.memory    = var_mem_size
      v.cpus      = var_cpus
      v.name      = var_host_fqdn
    end

    # Provision everything on the first run 
    # start part 01 of the setup
    cfg.vm.provision "shell", path: "../common/scripts/01_common_setup_os_oud.sh"

    # reload the VM
    cfg.vm.provision :reload
    # start part 10 of the setup
    # install OUD binaries
    cfg.vm.provision "shell", path: "scripts/10_install_binaries.sh"

    # create OUD instance
    #cfg.vm.provision "shell", path: "scripts/20_create_oud_instance.sh"
    # create OUDSM domain
    #cfg.vm.provision "shell", path: "scripts/30_create_oudsm_domain.sh"
    # config environment (backup,export, logrotate, startup etc)
    #cfg.vm.provision "shell", path: "scripts/40_config_oudbase.sh"

  end
end
# --- EOF -------------------------------------------------------------------